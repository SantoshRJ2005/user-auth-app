<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Driver - Agency Dashboard</title>
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        // Your brand's primary color
                        primary: '#ff6b4a',
                        'primary-hover': '#e65c40', // A darker shade for hover
                        // Your brand's secondary color (for text)
                        secondary: '#2c3e50',
                    }
                }
            }
        }
    </script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; }
        
        /* Use a slightly darker bg for hover, matching your old sidebar */
        .sidebar-link:hover { background-color: #334155; /* slate-700 */ }
        
        /* Use your brand's primary color for the active link */
        .sidebar-link.active { background-color: #ff6b4a; /* primary */ color: #ffffff; }

        .spinner { border: 2px solid rgba(255, 255, 255, 0.2); width: 16px; height: 16px; border-radius: 50%; border-left-color: #ffffff; animation: spin 1s linear infinite; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        
        /* Use brand's primary color for error focus ring */
        .input-error { border-color: #ef4444; background-color: #fee2e2; }
        .input-error:focus { border-color: #ef4444; --tw-ring-color: #ef4444; }
        .error-message { color: #dc2626; font-size: 0.875rem; margin-top: 0.5rem; /* Added margin */ }
        
        .sidebar { transition: transform 0.3s ease-in-out; }
    </style>
</head>
<body class="bg-slate-100">

<div class="flex h-screen">
    
    <div id="sidebar" class="fixed inset-y-0 left-0 bg-secondary text-slate-200 w-64 flex flex-col py-7 px-2 transform -translate-x-full lg:translate-x-0 z-30">
        
        <a href="/dashboard" class="text-primary text-2xl font-extrabold px-4 mb-6">SharingYatra</a>

        <div class="flex-1"> <nav class="space-y-1"> <a href="/manageBooking" class="sidebar-link flex items-center gap-3 py-2.5 px-4 rounded-lg transition-colors">
                    <i class="fa-solid fa-calendar-check w-5 text-center"></i>
                    <span>Manage Bookings</span>
                </a>
                <a href="/approvedRides" class="sidebar-link flex items-center gap-3 py-2.5 px-4 rounded-lg transition-colors">
                    <i class="fa-solid fa-check-double w-5 text-center"></i>
                    <span>Approved Bookings</span>
                </a>
                <a href="/addDriver" class="sidebar-link flex items-center gap-3 py-2.5 px-4 rounded-lg transition-colors active">
                    <i class="fa-solid fa-user-plus w-5 text-center"></i>
                    <span>Add Drivers</span>
                </a>
                <a href="/viewDriver" class="sidebar-link flex items-center gap-3 py-2.5 px-4 rounded-lg transition-colors">
                    <i class="fa-solid fa-users w-5 text-center"></i>
                    <span>View Drivers</span>
                </a>
                <a href="/addVehicles" class="sidebar-link flex items-center gap-3 py-2.5 px-4 rounded-lg transition-colors">
                    <i class="fa-solid fa-car w-5 text-center"></i>
                    <span>Add Vehicles</span>
                </a>
                <a href="/viewVehicles" class="sidebar-link flex items-center gap-3 py-2.5 px-4 rounded-lg transition-colors">
                    <i class="fa-solid fa-car-side w-5 text-center"></i>
                    <span>View Vehicles</span>
                </a>
                <a href="/earning" class="sidebar-link flex items-center gap-3 py-2.5 px-4 rounded-lg transition-colors">
                    <i class="fa-solid fa-chart-line w-5 text-center"></i>
                    <span>Earnings</span>
                </a>
                <a href="/dashboard" class="sidebar-link flex items-center gap-3 py-2.5 px-4 rounded-lg transition-colors">
                    <i class="fa-solid fa-user-circle w-5 text-center"></i>
                    <span>Profile</span>
                </a>
            </nav>
        </div>

        <div class="mt-6"> <a href="/logout" class="sidebar-link flex items-center gap-3 py-2.5 px-4 rounded-lg transition-colors">
                <i class="fa-solid fa-right-from-bracket w-5 text-center"></i>
                <span>Logout</span>
            </a>
        </div>
    </div>
    <div class="flex-1 flex flex-col overflow-hidden lg:ml-64">
        <header class="bg-white shadow-sm h-16 flex justify-between items-center px-6 flex-shrink-0">
            <button id="menu-button" class="lg:hidden text-slate-500 hover:text-slate-700">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path></svg>
            </button>
            
            <h2 class="text-2xl font-semibold text-secondary">Add New Driver</h2>
            
            <div class="w-6"></div> 
        </header>
        
        <main class="flex-1 overflow-y-auto p-4 sm:p-6 lg:p-8">
            <div class="bg-white rounded-2xl shadow-lg p-6 sm:p-8 lg:p-10 max-w-5xl mx-auto">
                <div id="messageArea" class="mb-6"></div>
                
                <form id="addDriverForm" novalidate>
                    <div class="grid grid-cols-1 lg:grid-cols-3 gap-x-8 gap-y-10">
                        
                        <div class="lg:col-span-1">
                            <h3 class="text-lg font-semibold text-secondary">Personal Details</h3>
                            <p class="mt-1 text-sm text-slate-600">Basic information about the driver.</p>
                        </div>
                        
                        <div class="lg:col-span-2">
                            <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
                                <div class="sm:col-span-1">
                                    <label for="fullName" class="block text-sm font-medium text-slate-700 mb-1">Full Name</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"><svg class="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path></svg></div>
                                        <input type="text" id="fullName" name="fullName" required placeholder="Enter driver's full name" class="w-full bg-white pl-10 pr-4 py-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition">
                                    </div>
                                    <p class="error-message hidden"></p>
                                </div>
                                <div class="sm:col-span-1">
                                    <label for="age" class="block text-sm font-medium text-slate-700 mb-1">Age</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"><svg class="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg></div>
                                        <input type="number" id="age" name="age" min="18" max="65" required placeholder="e.g., 35" class="w-full bg-white pl-10 pr-4 py-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition">
                                    </div>
                                    <p class="error-message hidden"></p>
                                </div>
                                <div class="sm:col-span-2">
                                    <label class="block text-sm font-medium text-slate-700 mb-2">Gender</label>
                                    <div class="flex items-center space-x-6">
                                        <label class="flex items-center cursor-pointer"><input type="radio" name="gender" value="male" class="sr-only peer" checked><span class="w-5 h-5 rounded-full border-2 border-slate-300 peer-checked:bg-primary peer-checked:border-primary flex items-center justify-center transition-all"><span class="w-2 h-2 rounded-full bg-white"></span></span><span class="ml-2 text-slate-700">Male</span></label>
                                        <label class="flex items-center cursor-pointer"><input type="radio" name="gender" value="female" class="sr-only peer"><span class="w-5 h-5 rounded-full border-2 border-slate-300 peer-checked:bg-primary peer-checked:border-primary flex items-center justify-center transition-all"><span class="w-2 h-2 rounded-full bg-white"></span></span><span class="ml-2 text-slate-700">Female</span></label>
                                        <label class="flex items-center cursor-pointer"><input type="radio" name="gender" value="other" class="sr-only peer"><span class="w-5 h-5 rounded-full border-2 border-slate-300 peer-checked:bg-primary peer-checked:border-primary flex items-center justify-center transition-all"><span class="w-2 h-2 rounded-full bg-white"></span></span><span class="ml-2 text-slate-700">Other</span></label>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <hr class="lg:col-span-3 my-4 border-slate-200">

                        <div class="lg:col-span-1">
                            <h3 class="text-lg font-semibold text-secondary">Contact Information</h3>
                            <p class="mt-1 text-sm text-slate-600">How to get in touch with the driver.</p>
                        </div>
                        
                        <div class="lg:col-span-2">
                            <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
                                <div class="sm:col-span-1">
                                    <label for="mobile" class="block text-sm font-medium text-slate-700 mb-1">Mobile Number</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"><svg class="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path></svg></div>
                                        <input type="tel" id="mobile" name="mobile" required pattern="[6789][0-9]{9}" placeholder="10-digit mobile number" class="w-full bg-white pl-10 pr-4 py-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition">
                                    </div>
                                    <p class="error-message hidden"></p>
                                </div>
                                <div class="sm:col-span-1">
                                    <label for="email" class="block text-sm font-medium text-slate-700 mb-1">Email ID</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"><svg class="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path></svg></div>
                                        <input type="email" id="email" name="email" required placeholder="driver@example.com" class="w-full bg-white pl-10 pr-4 py-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition">
                                    </div>
                                    <p class="error-message hidden"></p>
                                </div>
                                <div class="sm:col-span-2">
                                    <label for="address" class="block text-sm font-medium text-slate-700 mb-1">Full Address</label>
                                    <textarea id="address" name="address" rows="3" required placeholder="Enter driver's current address" class="w-full bg-white pl-4 pr-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition"></textarea>
                                    <p class="error-message hidden"></p>
                                </div>
                            </div>
                        </div>

                        <hr class="lg:col-span-3 my-4 border-slate-200">

                        <div class="lg:col-span-1">
                            <h3 class="text-lg font-semibold text-secondary">Credentials & Assignment</h3>
                            <p class="mt-1 text-sm text-slate-600">Security details and vehicle assignment.</p>
                        </div>

                        <div class="lg:col-span-2">
                            <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
                                <div class="sm:col-span-1">
                                    <label for="license" class="block text-sm font-medium text-slate-700 mb-1">Driving License Number</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"><svg class="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V5a2 2 0 012-2h2a2 2 0 012 2v1m-4 0h4"></path></svg></div>
                                        <input type="text" id="license" name="license" required placeholder="e.g., MH1420230001234" class="w-full bg-white pl-10 pr-4 py-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition">
                                    </div>
                                    <p class="error-message hidden"></p>
                                </div>
                                <div class="sm:col-span-1">
                                    <label for="tempPassword" class="block text-sm font-medium text-slate-700 mb-1">Set Temporary Password</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"><svg class="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path></svg></div>
                                        <input type="password" id="tempPassword" name="tempPassword" required minlength="8" placeholder="Minimum 8 characters" class="w-full bg-white pl-10 pr-10 py-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition">
                                        <button type="button" id="togglePassword" class="absolute inset-y-0 right-0 px-3 flex items-center text-slate-500 hover:text-slate-700">
                                            <svg id="eye-open" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M15 12a3 3 0 11-6 0 3 3 0 016 0zM2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.SAX-7z"></path></svg>
                                            <svg id="eye-closed" class="w-5 h-5 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.542-7 1.274-4.057 5.064-7 9.542-7 .847 0 1.67.126 2.463.362m3.693 11.266A9.969 9.969 0 0021.542 12c-1.274-4.057-5.064-7-9.542-7a9.969 9.969 0 00-3.693 1.132M3 3l18 18"></path></svg>
                                        </button>
                                    </div>
                                    <p class="error-message hidden"></p>
                                </div>
                                <div class="sm:col-span-2">
                                    <label for="assignedVehicle" class="block text-sm font-medium text-slate-700 mb-1">Assign Vehicle (Optional)</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <svg class="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v8a2 2 0 01-2 2h-2m-4 0V4m0 12v4m0 0H6m4 0h4m-4 0H6M6 12H4m16 0h-2m-4-4h4m-4 4h4m-4 4h4M6 12H4m16 0h-2m-4-4h4m-4 4h4m-4 4h4"></path></svg>
                                            <i class="fa-solid fa-car w-5 h-5 text-slate-400"></i>
                                        </div>
                                        <select id="assignedVehicle" name="assignedVehicle" class="w-full bg-white pl-10 pr-4 py-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition">
                                            <option value="">Do not assign a vehicle</option>
                                            <% if (typeof vehicles !== 'undefined' && vehicles.length > 0) { %>
                                                <% vehicles.forEach(vehicle => { %>
                                                    <option value="<%= vehicle._id %>">
                                                        <%= vehicle.vehicle_name %> (<%= vehicle.number_plate %>)
                                                    </option>
                                                <% }) %>
                                            <% } else { %>
                                                <option value="" disabled>No available vehicles found</option>
                                            <% } %>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="pt-8 mt-10 border-t border-slate-200 flex justify-end">
                        <button type="submit" id="submitButton" class="flex items-center justify-center bg-primary text-white font-semibold py-3 px-8 rounded-lg hover:bg-primary-hover focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors duration-300 disabled:bg-primary/50 shadow-sm hover:shadow-md">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"></path></svg>
                            <span id="buttonText">Register Driver</span>
                            <div id="buttonSpinner" class="spinner hidden ml-2"></div>
                        </button>
                    </div>
                </form>
            </div>
        </main>
    </div>
    
    <div id="sidebar-overlay" class="fixed inset-0 bg-black bg-opacity-50 z-20 hidden lg:hidden"></div>
</div>

<script>
    // --- Mobile Sidebar Logic ---
    const sidebar = document.getElementById('sidebar');
    const menuButton = document.getElementById('menu-button');
    const overlay = document.getElementById('sidebar-overlay');
    function toggleSidebar() { sidebar.classList.toggle('-translate-x-full'); overlay.classList.toggle('hidden'); }
    menuButton.addEventListener('click', toggleSidebar);
    overlay.addEventListener('click', toggleSidebar);

    // --- Form Submission & Validation Logic ---
    const addDriverForm = document.getElementById('addDriverForm');
    const submitButton = document.getElementById('submitButton');
    const buttonText = document.getElementById('buttonText');
    const buttonSpinner = document.getElementById('buttonSpinner');
    const messageArea = document.getElementById('messageArea');
    const passwordInput = document.getElementById('tempPassword');
    const togglePasswordButton = document.getElementById('togglePassword');
    const eyeOpen = document.getElementById('eye-open');
    const eyeClosed = document.getElementById('eye-closed');

    // --- Password Visibility Toggle ---
    togglePasswordButton.addEventListener('click', () => {
        const isPassword = passwordInput.type === 'password';
        passwordInput.type = isPassword ? 'text' : 'password';
        eyeOpen.classList.toggle('hidden', isPassword);
        eyeClosed.classList.toggle('hidden', !isPassword);
    });

    // --- Live Validation ---
    const inputs = addDriverForm.querySelectorAll('input[required], textarea[required]');
    inputs.forEach(input => {
        input.addEventListener('input', () => validateInput(input));
        input.addEventListener('blur', () => validateInput(input));
    });

    function validateInput(input) {
        // Find the parent container (sm:col-span-1 or sm:col-span-2)
        const formGroup = input.closest('div[class*="sm:col-span-"]');
        if (!formGroup) return true; // Failsafe

        const errorMessageElement = formGroup.querySelector('.error-message');
        if (!errorMessageElement) return true; // Failsafe

        if (!input.checkValidity()) {
            input.classList.add('input-error');
            errorMessageElement.textContent = input.validationMessage;
            errorMessageElement.classList.remove('hidden');
            return false;
        } else {
            input.classList.remove('input-error');
            errorMessageElement.classList.add('hidden');
            return true;
        }
    }
    
    function validateAllFields() {
        let isFormValid = true;
        inputs.forEach(input => {
            if (!validateInput(input)) {
                isFormValid = false;
            }
        });
        return isFormValid;
    }

    addDriverForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        messageArea.innerHTML = '';
        
        if (!validateAllFields()) {
            displayMessage('Please fix the errors in the form.', 'error');
            return;
        }
        
        setLoading(true);

        const formData = new FormData(addDriverForm);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch('/adddriver', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (response.ok) { // Check if HTTP status is 2xx
                displayMessage(result.message, 'success');
                addDriverForm.reset(); // Clear the form on success
                // Scroll to top to see message
                window.scrollTo(0, 0);
                // Reload or redirect after a delay
                setTimeout(() => {
                    // Redirect to the new 'view drivers' page
                    window.location.href = '/viewDriver'; 
                }, 1500); 
            } else {
                displayMessage(result.message, 'error');
                window.scrollTo(0, 0);
            }
        } catch (error) {
            console.error('Submission Error:', error);
            displayMessage('A network error occurred. Please try again.', 'error');
            window.scrollTo(0, 0);
        } finally {
            setLoading(false); // Always re-enable the button
        }
    });

    function setLoading(isLoading) {
        submitButton.disabled = isLoading;
        buttonText.textContent = isLoading ? 'Saving...' : 'Register Driver';
        buttonSpinner.classList.toggle('hidden', !isLoading);
    }

    function displayMessage(message, type) {
        const successIcon = `<svg class="w-5 h-5 mr-3 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg>`;
        const errorIcon = `<svg class="w-5 h-5 mr-3 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path></svg>`;
        const bgColor = type === 'success' ? 'bg-green-100' : 'bg-red-100';
        const textColor = type === 'success' ? 'text-green-800' : 'text-red-800';
        const icon = type ==='success' ? successIcon : errorIcon;
        
        messageArea.innerHTML = `
            <div class="flex items-center p-4 rounded-lg text-sm ${bgColor} ${textColor}">
                ${icon}
                <span>${message}</span>
            </div>
        `;
    }
</script>
</body>
</html>
